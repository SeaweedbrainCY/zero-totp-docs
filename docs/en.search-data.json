{"/doc/":{"data":{"":"This documentation aims to provide a comprehensive guide to the Zero-TOTP codebase. It is designed to be a quick reference for developers and users who need to understand how Zero-TOTP works under the hood. The documentation will cover the following key areas:\nAPI documentation Cryptography flows "},"title":"Zero-TOTP Code Documentation"},"/doc/api/":{"data":{"":"The goal of this documentation is to provide a comprehensive guide to the Zero-TOTP API key points. It is designed to be a quick reference for developers and users who need to understand how to use the API effectively. The documentation is currently covering the following key areas:\nAPI Swagger Endpoints ACL "},"title":"API documentation"},"/doc/api/endpoints-acl/":{"data":{"":"","authentication#Authentication":"","authorization#Authorization":"Authentication Zero-TOTP ACLs are designed to control access to various API endpoints. The API uses a token-based authentication system. This token is named access_token and is provided through cookies after a successful login.\nAccess token The access_token is an uuid, stored server-side in the database, associated with a unique user account and generally valid for few minutes only. This token is used to authenticate requests to the API.\nRefresh token Alongside the access_token, the API also uses a refresh_token. The refresh_token is also an uuid, stored server-side in the database, associated with a unique user account and generally valid for a longer period (e.g., 24 hours). This token is associated to a unique access_token.\nThe refresh_token should never be used in general requests to the API, but only to call the refresh endpoint.\nThe refresh_token is sent to the user through cookies after a successful login.\nRefresh token flow The refresh token flow allows users to obtain a new access token without needing to re-authenticate. This is particularly useful for maintaining user sessions without requiring frequent logins and to keep the access_token validity as short as possible for security reasons.\nWhen the user’s access_token expires, the client must follow the following flow :\nPUT /api/v1/auth/refresh with the expired access_token and refresh_token in the request cookies. The API verifies The refresh_token is not expired. The refresh_token is not revoked. The refresh_token and access_token are associated with the same user account. The refresh_token is associated with the given access_token. If all checks pass the API: Generates a new access_token and refresh_token. Revokes the old access_token and refresh_token to prevent reuse. Returns the new access_token and refresh_token in the response cookies. The new refresh token will have the SAME expiry as the previous one. The authentication process involves the following steps:\nUser Login: The user sends a login request with their credentials (username and hashed password). Token Generation: Upon successful authentication, the server generates a unique token (UUID) and returns it to the user Authorization Authorization handlers The authorization is performed at 2 levels:\nOn the request arrival following the defined OpenAPI specs using the session checker defined in the api/CryptoClasses/session_verification.py:verify_session function. On the request processing through the wrappers defined in api/Utils/security_wrapper.py ACLs per endpoint Zero-TOTP API defines 3 levels of authorization:\nAnyone : Anyone, everyone, even without any cookie. Unverified user: A user successfully authenticated with an user token but with an email not verified Valid user: A user successfully authenticated with a verified email. Endpoint Anyone Unverified user Valid user /signup ✅ ✅ ✅ /login ✅ ✅ ✅ /login/specs ✅ ✅ ✅ /role ❌ ✅ ✅ /update/email ❌ ✅ ✅ /email/verify ❌ ✅ ✅ /email/send_verification ❌ ✅ ✅ /zke_encrypted_key ❌ ❌ ✅ /encrypted_secret/{uuid} ❌ ❌ ✅ /all_secrets ❌ ❌ ✅ /update/vault ❌ ❌ ✅ /vault/export ❌ ❌ ✅ /google-drive/oauth/authorization-flow ❌ ❌ ✅ /google-drive/oauth/callback ❌ ❌ ✅ /google-drive/option ❌ ❌ ✅ /google-drive/backup ❌ ❌ ✅ /google-drive/last-backup/verify ❌ ❌ ✅ /account ❌ ❌ ✅ /preferences ❌ ❌ ✅ "},"title":"Endpoints ACL"},"/doc/api/swagger/":{"data":{"":"If this page doesn’t work, you can consult the API swagger directly on GitHub\nThis page is an iframe of https://zero-totp.com/api/v1/ui."},"title":"Swagger"},"/doc/cryptography/":{"data":{"":"The goal of this documentation is to provide a comprehensive guide to the cryptographic aspects of Zero-TOTP. It is designed to be a quick reference for developers and users who need to understand how Zero-TOTP implements cryptography effectively. The documentation will cover the following key areas:"},"title":"Cryptography"},"/latest/":{"data":{"":" Free, open source, self-hosted Store your TOTP codes in a safe place Zero-TOTP is a 100% open-source, self-hostable and a Zero-Knowledge Infrastructure platform for storing TOTP codes.  "},"title":"Zero-TOTP Documentation"},"/latest/self-host/":{"data":{"":"Zero-TOTP is one of the most secure and easy way to store TOTP codes. For a maximum security, you can easily self-host Zero-TOTP yourself and control 100% of your data, installation, configuration and updates.\nThis guide will help you to install and configure Zero-TOTP on your server.\nThe self-hosting is designed to implement as much as default security features as possible. However, configuration is the key to a secure and reliable Zero-TOTP instance.\nBefore starting, make sure to be confortable with the following concepts:\nDocker and docker-compose Reverse proxy (Nginx, Traefik, Caddy, etc.) Basic Linux commands Yaml syntax Tip\nIf you have any question or doubt, you can ask for help in the Zero-TOTP Discord server or in the Zero-TOTP GitHub discussions\nInstallation mandatory Setup mandatory Customization recommended "},"title":"Self-hosting Zero-TOTP"},"/latest/self-host/admin/":{"data":{"":"During the whole life of your Zero-TOTP instance, you will need to perform some administrative tasks. This page will help you to perform these tasks.\nAmong the task you might need to perform, you will find:\nDatabase backup and restore (database backup is more than heavily recommended !) Database migration (when upgrading Zero-TOTP version) Database backup "},"title":"Admin"},"/latest/self-host/admin/database-backup/":{"data":{"":"","backup-your-database#Backup your database":"","restore-a-database-backup#Restore a database backup":"Backing up your database is important to prevent data loss. You can use the mariadb-dump utility to backup your database.\nBackup your database Note\nIf you are not using environment variables in docker, make sure to update \"$MYSQL_DATABASE\" and \"$MYSQL_ROOT_PASSWORD\".\nTo backup your database, you can use the following commands on your host :\nDatabase backup commanddocker compose exec database /bin/bash -c 'mariadb-dump --databases $MYSQL_DATABASE --user=root --password=$MYSQL_ROOT_PASSWORD \u003e /var/lib/mysql/db_backup_$(date +%Y%m%d_%H%M%S).sql' Warning\nBackup location :\nThe backup file will be named db_backup_*.log The backup file will be saved in the /var/lib/mysql directory of the database container which is a mounted volume in your host. Check the mount point in your docker-compose.yml file to find the backup file. Important\nIt is highly recommended to copy the backups files into an external filesystem and verify they are not empty !\nRestore a database backup Make sure to mount the backup file into the database container before running the restore command. You can use the /var/lib/mysql mounted volume to copy the backup file into the container. The default path for the mounted volume is $pwd/database/config/.\nNote\nIf you are not using environment variables in docker, make sure to update \"$MYSQL_DATABASE\" and \"$MYSQL_ROOT_PASSWORD\".\nRestore backupdocker compose exec database /bin/sh -c 'mariadb --user=root --password=$MYSQL_ROOT_PASSWORD \u003c $PATH_TO_SQL_FILE_IN_DOCKER_CONTAINER.sql' "},"title":"Database Backup"},"/latest/self-host/admin/database-migration/":{"data":{"":"When you are upgrading Zero-TOTP, you may need to migrate your database to the new version. If this is the case, it will be mentioned in the release notes and the API will refuse to start.\nTo avoid any data loss, you will have to perform the migration yourself after having made a backup of your database.","how-to-migrate-your-database#How to migrate your database":"1 - Backup your database Before performing any migration, it is highly recommended to backup your database. You can follow the Backup and restore documentation to backup your database.\n2 - Run the migration script Zero-TOTP provides a built-in migration script, directly in the API docker container to help you migrate your database.\nYou can run the migration script using the following command:\nRun migration scriptdocker compose exec api /bin/sh -c \"./admin-toolbox.sh db-migrate\" Follow the instructions to complete the migration.\nNote\nThe API will perform the migration on the database and will update the database schema to the latest version. Therefore, the database must be up and running !\n3 - Restart the API After the migration is complete, you will need to restart the API to apply the changes. You can do this by running:\nRestart APIdocker compose restart api "},"title":"Database Migration"},"/latest/self-host/admin/google_drive_backup/":{"data":{"":"Zero-TOTP offers a very important feature to ensure the availability of your users’ data: automatic backups to Google Drive. This feature allows users to automatically backup their data to their Google Drive account, ensuring that they can restore their data in case of loss, corruption or downtime.\nBy default, this feature is disabled since it requires this tenant of Zero-TOTP to be authorized by the user to access their Google Drive account (via OAuth2).","how-to-enable-google-drive-backups#How to enable Google Drive backups":"1 - Create an Oauth consent screen Recommended : Google documentation To enable Google Drive backups, you first need to create an OAuth consent screen. This screen is necessary for users to authorize your application to access their Google Drive account. Follow these steps:\nGo to the Google Cloud Console. Create a new project or select an existing one. Navigate to the APIs \u0026 Services section. Click on OAuth consent screen in the left sidebar. Select the External user type. Fill in the required fields such as App name, User support email, and Developer contact information. 2 - Register your application on Google Cloud Recommended : Google documentation To enable Google Drive backups, you need to register your application on Google Cloud and obtain the necessary credentials. Follow these steps:\nGo to the Google Cloud Console. Select the project you created in the previous step. Navigate to the APIs \u0026 Services section. Click on Credentials in the left sidebar. Click on Create credentials and select OAuth client ID. Configure the consent screen by providing the necessary information (application name, support email, etc.). Select Web application as the application type. Add the following authorized Javascript origins: https://\u003cyour-domain\u003e Replace \u003cyour-domain\u003e with your actual domain name. Add the following redirect URI: https://\u003cyour-domain\u003e/api/v1/google-drive/oauth/callback Replace \u003cyour-domain\u003e with your actual domain name. Click on Create to generate your OAuth client ID and secret. Download the JSON file containing your credentials. This file will be used to configure Zero-TOTP. 3 - Configure Google Drive access Go to the Google Cloud Console. Select the project you created in the previous step. Navigate to the APIs \u0026 Services section. Click on Library in the left sidebar. Search for Google Drive API and click on it. Click on the Enable button to enable the Google Drive API for your project. Go back to APIs \u0026 Services and click on Oauth Consent Screen in the left sidebar. Click on Data Access in the left sidebar. Click on Add or remove scopes. Add the following scopes: .../auth/drive.appdata .../auth/drive.file Click on Update to save the changes. Publish your OAuth consent screen by clicking on the Publish App button. You will need to fill in some additional information such as the application homepage, privacy policy URL, and terms of service URL. Google will review your application before it can be published. This process may take some time, so be patient. In the meantime, you can test the Google Drive backups feature in development mode. In development mode, only whitelisted users can use the Oauth consent screen. You can add users to the whitelist by going to the OAuth consent screen page in the Google Cloud Console and clicking on the Test users tab. Add the email addresses of the users you want to whitelist. 4 - Configure Zero-TOTP Upload the JSON file containing your credentials to the Zero-TOTP server host. Mount the file into the Zero-TOTP API container. You can choose the path you want. The most convenient way is to use the already mounted /api/config/ directory. Edit the config.yml file of your Zero-TOTP instance and configure the following fields : config.yml (partial)# [...] features: google_drive_backup: enabled: true client_secret_file_path: \"/api/config/your_client_secret_file.json\" # Path to the JSON file containing your credentials # [...] "},"title":"Google Drive backups"},"/latest/self-host/customization/":{"data":{"":"Beside mandatory fields, it is highly recommended customizing your Zero-TOTP instance to fit your needs and network architecture.\nThis page will guide you through the customization process and explain how to properly configure Zero-TOTP.\nImportant\nThis page help you to configure your config.yml file. The ease the notation, the fields are written as 1 line. But, it is only to describe the yaml file.\nFor example, api.port: 8080 means that you have to write the following in your config.yml file:\napi: port: 8080 ","features-customization-recommended#Features customization (recommended)":"This parts helps you customize the enabled features of Zero-TOTP. Unlike the API customization, keeping the default configuration will not impact the API behavior or its security, but will disable some features.\nDefault values are provided to keeo Zero-TOTP as plug and play as possible. But it is recommended to adapt those values to fit your needs.\nGoogle Drive automatic backup Note\nBefore being able to configure Google Drive automatic backup, you must first register your application as a Google Oauth client. See the How to configure Google Drive automatic backup for more information.\nOne key feature of Zero-TOTP is the possibility for users to automatically backup their vaults to Google Drive. To enable this feature, you must register you application as a Google Oauth client and give the following information :\nField: features.google_drive_backup.enabled Type: bool Default: false Description: Enable Google Drive automatic backup feature. If set to true, below setting will have to be filled. Field: features.google_drive_backup.client_secret_file_path Type: string Default: \"\" Description: The path to the client secret file used to authenticate with Google Drive. This file must be in JSON format and contain the OAuth credentials. See the How to configure Google Drive automatic backup for more information. Automatic backup configuration For now, only Google Drive automatic backup is supported. But the below configuration is used for every backup provider. The main goal is to define the default backup frequency and the minimum number of backups to keep. Users will be able to override those settings in their profile.\nField: features.default_backup_configuration.backup_minimum_count Type: int Default: 20 Description: Minimum number of backups Zero-TOTP will ever keep in user’s Google Drive. Default : no matter what, Zero-TOTP will always keep at least the 20 last backups in user’s Google Drive. Field: features.default_backup_configuration.max_age_in_days Type: int Default: 30 Description: Backups minimum age. If backups are older than this parameter, in days, and if the above parameter is also matched, backups will be deleted. Default : 30 days Emails The email feature is used to send emails to users. The main purpose is to send verification emails to your users when signing up, but also for password reset. STARTTLS is required.\nIf you disable emails, users will not be prompted to validate their email.\nField : features.emails.require_email_validation Type: bool Default: false Description: Require email validation for new users. If set to true, below settings will have to be filled. Field : features.emails.email_sender_address Type: string Default: \"\" Description: Sender email address. Can be example@domain.com or Example \u003cexample@domain.com\u003e. Field : features.emails.email_smtp_port Type: int Default: \"\" Description: SMTP port to use. STARTTLS will be used. Field : features.emails.email_smtp_username Type: string Default: \"\" Description: Username used to authenticate to SMTP server. STARTTLS will be used. Field : features.emails.email_smtp_password Type: string Default: \"\" Description: Password used to authenticate to SMTP server. STARTTLS will be used. Rate limiting Zero-TOTP has a built-in rate limiting feature to prevent abuse of the API and more specifically protect the login endpoint and email verification endpoint. This feature is enabled by default.\nField: features.rate_limiting.login_attempts_limit_per_ip Type: int Default: 10 Description: Max consecutive failed login per IP within 1h. Default : max 10 failed login per 1h per IP Field: features.rate_limiting.login_ban_time Type: int Default: 15 Description: If the previous condition is matched, this value defines to ban time, per IP, in minutes, from login. Default: 15min Field: features.rate_limiting.send_email_attempts_limit_per_user Type: int Default: 5 Description: Max consecutive verification email sent to a user within 1 hour. Default : max 5 consecutive verification email sent per hour per user. Field: features.rate_limiting.send_email_ban_time Type: int Default: 60 Description: If the previous condition is matched, this value defines to ban time, per user, in minutes, from requesting a new verification email. Default: 60min Sentry Zero-TOTP has a built-in Sentry integration to report errors and exceptions. This feature is disabled by default.\nField : features.sentry.dsn Type: string Default: \"\" Description: Sentry DSN URL. For more information, see the Sentry documentation. "},"title":"Customization"},"/latest/self-host/installation/":{"data":{"":"","how-images-tags-work#How images tags work":"Zero-TOTP supports installation via Docker. This guide will help you to set up Zero-TOTP on your server.\nRequirements To self-host Zero-TOTP, you need the following components:\nDocker (and docker compose for easier management) Installation via docker-compose Create the following docker-compose.yml :\ndocker-compose.ymlservices: frontend: container_name: frontend image: ghcr.io/seaweedbraincy/zero-totp-frontend:1.9 environment: USER_UID: 101 USER_GID: 101 ports: - 4200:80 volumes: - ./frontend/log:/var/log/nginx restart: always api: container_name: api image: ghcr.io/seaweedbraincy/zero-totp-api:1.9 environment: USER_UID: 1001 USER_GID: 1001 ports: - 8080:8080 volumes: - ./api/secret:/api/secret - ./api/logs:/api/logs - ./api/config:/api/config restart: always database: environment: MYSQL_ROOT_PASSWORD: weak_password ## CHANGE_ME MYSQL_DATABASE: zero_totp MYSQL_USER: api MYSQL_PASSWORD: weak_password ## CHANGE_ME image: mariadb:11 container_name: database ports: - \"127.0.0.1:3306:3306\" volumes: - ./database/data:/var/lib/mysql - ./database/config:/etc/mysql restart: always Warning\nMake sure to change the MYSQL_ROOT_PASSWORD and MYSQL_PASSWORD to a strong password.\nHow images tags work Official and stable releases of Zero-TOTP are disclosed in Github releases page.\nThey always work with the same version of the API and the frontend. Version tag format is vX.Y.Z where X is the major version, Y is the minor version and Z is the patch version.\nEach new release is always associated with 3 tags:\nX.Y.Z, the last exact stable version of Zero-TOTP. X.Y, the last stable version of Zero-TOTP. You can safely use this and regularly upgrade to get the last patches, without worrying about breaking changes. latest, the last stable version of Zero-TOTP. Note\nIt is highly recommended to use the X.Y tag to ensure you are always using the latest stable version of Zero-TOTP without worrying about breaking changes.\nUsing latest tag is not recommended as it may lead to unexpected breaking changes if a new major version is released.","installation-via-docker-compose#Installation via docker-compose":"","requirements#Requirements":""},"title":"Installation"},"/latest/self-host/setup/":{"data":{"":"Before starting using your Zero-TOTP instance, you need to set it up. This guide will help you to set up Zero-TOTP on your server. This setup is mandatory. To further customize your instance, please refer to the customization page.\n1 - Reverse proxy setup Mandatory 2 - API setup Mandatory 3 - Database setup Mandatory 4 - Customization Recommended "},"title":"Setup"},"/latest/self-host/setup/api/":{"data":{"":"Zero-TOTP is configured via a yaml config file that must be mounted in the container. You can follow the volume mounting of the installation or use your own. In anyway, the config file should be located and named : /api/config/config.yml in the API container.\nYou can download the default config file :\ncurl https://raw.githubusercontent.com/SeaweedbrainCY/zero-totp/refs/tags/v1.9.0/api/config/config-example.yml --create-dirs -o ./api/config/config.yml or copy the content of the default config file and paste it in a file named ./api/config/config.yml.\nNote\nSeveral fields are mandatory in the config file. You must fill them to make Zero-TOTP work. If fields are missing, the API will fail to start.","mandatory-configuration-fields#Mandatory configuration fields":"Here are the list of mandatory fields you need to fill in the config file. :\nTip\nOnly mandatory fields are listed here. For customization and understand other settings, see the customization page.\nImportant\nThis page help you to configure your config.yml file. To ease the notation, the fields are written as 1 line. But, it is only to describe the yaml file.\nFor example, api.port: 8080 means that you have to write the following in your config.yml file:\napi: port: 8080 Field : api.private_key_path Type: string Default: \".secret/private.pem\" Description: Absolute path to the API private key used to sign vaults to guarantee their authenticity. This must be a PEM encoded RSA private key. If the file does not exist, it will be generated at startup. Field : api.public_key_path Type: string Default: \".secret/public.pem\" Description: Absolute path to the API public key used to verify vaults authenticity. This must be a PEM encoded RSA public key. If the file does not exist, it will be generated at startup. Field : api.flask_secret_key Type: string Default: (empty) Description: A random 128 alphanumeric char string used to encrypt flask session. Safe generation tool Field : api.server_side_encryption_key Type: string Default: (empty) Description: A random 128 alphanumeric char string used to encrypt data stored in the database that is not Encrypted by default by the ZKE flow. BE CAREFULL WITHOUT THIS KEY SOME OF SAVED DATA WILL BE UNREADABLE. DO NOT LOOSE THIS KEY. Safe generation tool Field : environment.type Type: string Default: \"production\" Description: This value is used to determine the logging level and security features enabling. Possible values are “local”, “development” and “production”. For security reasons, production instances should run under \"production\" type. Field : environment.config_version Type: string Default: 1.0 Description: DO NOT modify this value if not prompted to do so. Field : environment.domain Type: string Default: (empty) Description: Domain used by your instance. This is used to enforce the security of the API. The API must be served over HTTPS. Only include the domain name, without the protocol or path. The domain MUST be the same as the one used in the frontend. Field : database.database_uri Type: string Default: (empty) Description: The URI of the database to connect to. The URI must be in the format of \"mysql://user:password@host:port/db_name\" "},"title":"2 - API Setup"},"/latest/self-host/setup/database/":{"data":{"":"This is the final mandatory step to set up your Zero-TOTP instance. Zero-TOTP uses a MariaDB database, included in the docker-compose file. To mantain the security and integrity of your data, all the administration is delegated to the server owner. Make sure to make regular backups of your database and to secure it properly.\nBefore being able to start Zero-TOTP, you will need to set up your database.","initial-database-migration#Initial database migration":"For now, your database is empty and not initialized. You will need to run the initial database migration to create the necessary tables and data. A built-in administration script is provided to help you with this task.\nYou will be able to manage crucial database operations from the API. To set up you database please :\nStart your database docker compose up -d database\nMake sure the database is running and ready docker compose logs database -f --tail 100\nStart your API docker compose up -d api\nMake sure the API is asking for a migration docker compose logs api -f --tail 100\nYou should see the following message\napi | ERROR [alembic.util.messaging] Target database is not up to date. api | FAILED: Target database is not up to date. api | ❌ Your database is not up to date. Follow Zero-TOTP's documentation to update it. api | 📚 https://docs.zero-totp.com/latest/self-host/admin/database-migration/ api | 🕛 Docker will wait for your action to continue This is expected, as the database is not yet initialized.\nHowever, the API should not be crashing or throwing errors not related to database migration. If it does, please check the logs for any issues, it may be related to your configuration file or the database connection.\nRun the initial database migration docker compose exec api /bin/sh -c \"./admin-toolbox.sh db-migrate\"\nRestart the API docker compose restart api\nThe API should now be healthy and ready to use. You can check the logs to make sure everything is working properly.\nAll done ?\nYou are now all set up ! 🎉🎉\nYou can just start your server docker compose up -d and enjoy. Make sure to visit the customization page to see all the features you can configure."},"title":"3 - Database Setup"},"/latest/self-host/setup/reverse-proxy/":{"data":{"":"","#":"A reverse proxy is mandatory to serve Zero-TOTP. The API is not designed to be served directly over the internet. You can use any reverse proxy you want, the following examples uses Nginx and Caddy, but any reverse proxy will work as long as it can serve the frontend and API over HTTPS and handle X-Forwarded-* headers (see below).\nRevproxy requirements No matter which reverse proxy you choose, the following considerations must be taken into account:\nRouting and domain considerations :\nThe frontend and the API must be served on the same domain. Route / must serve the frontend. Route /api/ must serve the API. The requests to the API must contain the /api prefix. Security considerations :\nThe frontend and API over HTTPS. This is mandatory to enable the security features of Zero-TOTP. For security reasons the reverse proxy must overwrite the X-Forwarded-For header with the real remote ip. Warning\nBe careful to X-Forwarded-For that can be spoofed and must not be trusted. Zero-TOTP API is not meant to deal with a list of forwarded IP. The reverse proxy must keep the right one. Please refer to the documentation of your reverse proxy to see how to configure it properly.\nA special guide for revproxy behind Cloudflare is available below.\nImportant\nA bad configuration of the reverse proxy can lead to serious security issues. If you are not sure how to configure your reverse proxy, please use the provided examples, refer to the documentation of your reverse proxy or ask for help in the Zero-TOTP Discord server.\nCaddy example We are considering the API/frontend are running on the same server and the docker compose is configured to expose the API on port 8080 and the frontend on port 4200. Adapt the IP and port to your setup.\nHere is an example of a caddyfile that can be used to serve Zero-TOTP :\nCaddyfilehttps://zero-totp.example.com { # Serve the API reverse_proxy /api/* 127.0.0.1:8080 { header_up X-Forwarded-For {client_ip} } reverse_proxy 127.0.0.1:4200 } This is a basic configuration, make sure to adapt it to your needs. You can find more information on the Caddy documentation.\nNginx example Here is an example of an Nginx configuration that can be used to serve Zero-TOTP. This configuration assumes the API is running on port 8080 and the frontend on port 4200. Adapt the IP and port to your setup.\nnginx.confserver { listen 80; server_name zero-totp.example.com; # Redirect HTTP to HTTPS return 301 https://$host$request_uri; } server { listen 443 ssl; server_name zero-totp.example.com; # SSL configuration ssl_certificate /path/to/your/certificate.crt; ssl_certificate_key /path/to/your/private.key; # Serve the API location /api/ { proxy_pass http://127.0.1:8080/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; } # Serve the frontend location / { proxy_pass http://127.0.1:4200; } } This is a basic configuration, make sure to adapt it to your needs. You can find more information on the Nginx documentation. Note that nginx does not handle TLS termination by itself, you will need to use a tool like Certbot to obtain and renew your SSL certificates.\nReverse proxy behind Cloudflare Cloudflare adds the X-Forwarded-For header if it does not exist, and if it does exist it will just append another IP to it. This means a client can forge their remote IP address with the most widely accepted remote IP header out of the box.\nTo prevent this, 2 solution are available:\nDo NOT use the X-Forwarded-For header, but use the CF-Connecting-IP header instead. This is the recommended solution. (See the Cloudflare documentation for more information). Follow this guide from Authelia’s team to configure cloudflare to safely handle the X-Forwarded-For header. "},"title":"1 -  Revproxy setup"},"/v1.7/":{"data":{"":" Free, open source, self-hosted Store your TOTP codes in a safe place Zero-TOTP is a 100% open-source, self-hostable and a Zero-Knowledge Infrastructure platform for storing TOTP codes.  "},"title":"Zero-TOTP Documentation"},"/v1.7/self-host/":{"data":{"":"Zero-TOTP is one of the most secure and easy way to store TOTP codes. For a maximum security, you can easily self-host Zero-TOTP yourself and control 100% of your data, installation, configuration and updates.\nThis guide will help you to install and configure Zero-TOTP on your server.\nThe self-hosting is designed to implement as much as default security features as possible. However, configuration is the key to a secure and reliable Zero-TOTP instance.\nBefore starting, make sure to be confortable with the following concepts:\nDocker and docker-compose Reverse proxy (Nginx, Traefik, Caddy, etc.) Basic Linux commands Yaml syntax Tip\nIf you have any question or doubt, you can ask for help in the Zero-TOTP Discord server or in the Zero-TOTP GitHub discussions\nInstallation mandatory Setup mandatory Customization recommended "},"title":"Self-hosting Zero-TOTP"},"/v1.7/self-host/admin/":{"data":{"":"During the whole life of your Zero-TOTP instance, you will need to perform some administrative tasks. This page will help you to perform these tasks.\nAmong the task you might need to perform, you will find:\nDatabase backup and restore (database backup is more than heavily recommended !) Database migration (when upgrading Zero-TOTP version) Database backup "},"title":"Admin"},"/v1.7/self-host/admin/database-backup/":{"data":{"":"","backup-your-database#Backup your database":"","restore-a-database-backup#Restore a database backup":"Backing up your database is important to prevent data loss. You can use the mariadb-dump utility to backup your database.\nBackup your database Note\nIf you are not using environment variables in docker, make sure to update \"$MYSQL_DATABASE\" and \"$MYSQL_ROOT_PASSWORD\".\nTo backup your database, you can use the following commands on your host :\nDatabase backup commanddocker compose exec database /bin/bash -c 'mariadb-dump --databases $MYSQL_DATABASE --user=root --password=$MYSQL_ROOT_PASSWORD \u003e /var/lib/mysql/db_backup_$(date +%Y%m%d_%H%M%S).sql' Warning\nBackup location :\nThe backup file will be named db_backup_*.log The backup file will be saved in the /var/lib/mysql directory of the database container which is a mounted volume in your host. Check the mount point in your docker-compose.yml file to find the backup file. Important\nIt is highly recommended to copy the backups files into an external filesystem and verify they are not empty !\nRestore a database backup Make sure to mount the backup file into the database container before running the restore command. You can use the /var/lib/mysql mounted volume to copy the backup file into the container. The default path for the mounted volume is $pwd/database/config/.\nNote\nIf you are not using environment variables in docker, make sure to update \"$MYSQL_DATABASE\" and \"$MYSQL_ROOT_PASSWORD\".\nRestore backupdocker compose exec database /bin/sh -c 'mariadb --user=root --password=$MYSQL_ROOT_PASSWORD \u003c $PATH_TO_SQL_FILE_IN_DOCKER_CONTAINER.sql' "},"title":"Database Backup"},"/v1.7/self-host/customization/":{"data":{"":"Beside mandatory fields, it is highly recommended customizing your Zero-TOTP instance to fit your needs and network architecture.\nThis page will guide you through the customization process and explain how to properly configure Zero-TOTP.\nImportant\nThis page help you to configure your config.yml file. The ease the notation, the fields are written as 1 line. But, it is only to describe the yaml file.\nFor example, api.port: 8080 means that you have to write the following in your config.yml file:\napi: port: 8080 ","api-customization-highly-recommended#API customization (highly recommended)":"This part details how you can control the API behavior and security features.\nAll those fields have default values. To use default values, keep the fields commented out.\nField : api.port Type: int Default: 8080 Description: The port on which the API will listen. This is the port exposed inside the docker container. Field : api.trusted_proxy Type: list Default: [] Description: List of IP addresses or CIDR of your trusted reverse proxy that are in front of Zero-TOTP and will forward requests. This is essential to retrieve the real IP of your client and a misconfiguration can cause security issues. Kindly refer to the proxy setup instructions. Field : api.trusted_proxy_header Type: string Default: X-Forwarded-For Description: The header used by your reverse proxy to forward the real IP of the client. This is essential for security and logging purposes. Field : api.session_token_validity Type: int Default: 600 (10 minutes) Description: The access token is used to authenticate the user across the app. This is the token lifetime validity in seconds. Keeping a low value is highly recommended for security reasons. Field : api.refresh_token_validity Type: int Default: 86400 (24 hours) Description: The refresh token is used to refresh the session token without asking the user to sign in again. This is the token lifetime validity in seconds. Modification of this value will impact the maximum duration of your user’s session. Field : api.health_check.node_check_enabled Type: bool Default: false Description: Health check endpoint used to check if the API is running correctly. This enabled the node name check. This check is used to determine which api node is answering API calls. This is useful for load balancing. The API will return the SHA256-HMAC(node_name, node_name_hmac_secret) in the response. You can disable the display of your API node hashed name by setting this field to false. Field : api.health_check.node_name Type: string Default: (empty) Description: If name check enabled (see above), the API will return the SHA256-HMAC(node_name, node_name_hmac_secret) in the response. This is useful for load balancing monitoring. Field : api.health_check.node_name_hmac_secret Type: string Default: (empty) Description: If name check enabled (see above), the API will return the SHA256-HMAC(node_name, node_name_hmac_secret) in the response. This is useful for load balancing monitoring. This value must be an alphanumeric string. ","features-customization-recommended#Features customization (recommended)":"This parts helps you customize the enabled features of Zero-TOTP. Unlike the API customization, keeping the default configuration will not impact the API behavior or its security, but will disable some features.\nDefault values are provided to keeo Zero-TOTP as plug and play as possible. But it is recommended to adapt those values to fit your needs.\nGoogle Drive automatic backup One key feature of Zero-TOTP is the possibility for users to automatically backup their vaults to Google Drive. To enable this feature, you must register you application as a Google Oauth client and give the following information :\nField: features.google_drive_backup.enabled Type: bool Default: false Description: Enable Google Drive automatic backup feature. If set to true, below setting will have to be filled. Field: features.google_drive_backup.client_secret_file_path Type: string Default: \"\" Description: The path to the client secret file used to authenticate with Google Drive. This file must be in JSON format and contain the OAuth credentials. See https://developers.google.com/identity/protocols/oauth2 for more information. Automatic backup configuration For now, only Google Drive automatic backup is supported. But the below configuration is used for every backup provider. The main goal is to define the default backup frequency and the minimum number of backups to keep. Users will be able to override those settings in their profile.\nField: features.default_backup_configuration.backup_minimum_count Type: int Default: 20 Description: Minimum number of backups Zero-TOTP will ever keep in user’s Google Drive. Default : no matter what, Zero-TOTP will always keep at least the 20 last backups in user’s Google Drive. Field: features.default_backup_configuration.max_age_in_days Type: int Default: 30 Description: Backups minimum age. If backups are older than this parameter, in days, and if the above parameter is also matched, backups will be deleted. Default : 30 days Field type Mandatory Default Description features.default_backup_configuration.backup_minimum_count int optional 20 Minimum number of backups Zero-TOTP will ever keep in user’s google drive. Default : no matter what, Zero-TOTP will always keep at least the 20 last backups in user’s google drive. features.default_backup_configuration.max_age_in_days int optional 30 Backups minimum age. If backups are older than this parameter, in days, and if the above parameter is also matched, backups will be deleted. Default : 30 days Emails The email feature is used to send emails to users. The main purpose is to send verification emails to your users when signing up, but also for password reset. STARTTLS is required.\nIf you disable emails, users will not be prompted to validate their email.\nField : features.emails.require_email_validation Type: bool Default: false Description: Require email validation for new users. If set to true, below settings will have to be filled. Field : features.emails.email_sender_address Type: string Default: \"\" Description: Sender email address. Can be example@domain.com or Example \u003cexample@domain.com\u003e. Field : features.emails.email_smtp_port Type: int Default: \"\" Description: SMTP port to use. STARTTLS will be used. Field : features.emails.email_smtp_username Type: string Default: \"\" Description: Username used to authenticate to SMTP server. STARTTLS will be used. Field : features.emails.email_smtp_password Type: string Default: \"\" Description: Password used to authenticate to SMTP server. STARTTLS will be used. Rate limiting Zero-TOTP has a built-in rate limiting feature to prevent abuse of the API and more specifically protect the login endpoint and email verification endpoint. This feature is enabled by default.\nField: features.rate_limiting.login_attempts_limit_per_ip Type: int Default: 10 Description: Max consecutive failed login per IP within 1h. Default : max 10 failed login per 1h per IP Field: features.rate_limiting.login_ban_time Type: int Default: 15 Description: If the previous condition is matched, this value defines to ban time, per IP, in minutes, from login. Default: 15min Field: features.rate_limiting.send_email_attempts_limit_per_user Type: int Default: 5 Description: Max consecutive verification email sent to a user within 1 hour. Default : max 5 consecutive verification email sent per hour per user. Field: features.rate_limiting.send_email_ban_time Type: int Default: 60 Description: If the previous condition is matched, this value defines to ban time, per user, in minutes, from requesting a new verification email. Default: 60min Sentry Zero-TOTP has a built-in Sentry integration to report errors and exceptions. This feature is disabled by default.\nField : features.sentry.dsn Type: string Default: \"\" Description: Sentry DSN URL. For more information, see the Sentry documentation. "},"title":"Configuration"},"/v1.7/self-host/installation/":{"data":{"":"","installation-via-docker-compose#Installation via docker-compose":"Create the following docker-compose.yml :\ndocker-compose.ymlservices: frontend: container_name: frontend image: ghcr.io/seaweedbraincy/zero-totp-frontend:1.7 user: \"101:101\" ports: - 4200:80 volumes: - ./frontend/log:/var/log/nginx restart: always api: container_name: api image: ghcr.io/seaweedbraincy/zero-totp-api:1.7 environment: USER_UID: 1001 USER_GID: 1001 ports: - 8080:8080 volumes: - ./api/secret:/api/secret - ./api/logs:/api/logs - ./api/config:/api/config restart: always database: environment: MYSQL_ROOT_PASSWORD: weak_password ## CHANGE_ME MYSQL_DATABASE: zero_totp MYSQL_USER: api MYSQL_PASSWORD: weak_password ## CHANGE_ME image: mariadb:latest container_name: database ports: - \"3306:3306\" volumes: - ./database/data:/var/lib/mysql - ./database/config:/etc/mysql restart: always Warning\nMake sure to change the MYSQL_ROOT_PASSWORD and MYSQL_PASSWORD to a strong password.","requirements#Requirements":"Zero-TOTP supports installation via Docker. This guide will help you to set up Zero-TOTP on your server.\nRequirements To self-host Zero-TOTP, you need the following components:\nDocker (and docker compose for easier management) "},"title":"Installation"},"/v1.7/self-host/setup/":{"data":{"":"Before starting using your Zero-TOTP instance, you need to set it up. This guide will help you to set up Zero-TOTP on your server. This setup is mandatory. To further customize your instance, please refer to the customization page.\n1 - Reverse proxy setup Mandatory 2 - API setup Mandatory 3 - Database setup Mandatory 4 - Customization Recommended "},"title":"Setup"},"/v1.7/self-host/setup/api/":{"data":{"":"Zero-TOTP is configured via a yaml config file that must be mounted in the container. You can follow the volume mounting of the installation or use your own. In anyway, the config file should be located and named : /api/config/config.yml in the API container.\nYou can download the default config file :\ncurl -o config.yml https://raw.githubusercontent.com/SeaweedbrainCY/zero-totp/refs/heads/main/api/config/config-example.yml or copy the content of the default config file and paste it in a file named config.yml.\nNote\nSeveral fields are mandatory in the config file. You must fill them to make Zero-TOTP work. If fields are missing, the API will fail to start.","mandatory-configuration-fields#Mandatory configuration fields":"Here are the list of mandatory fields you need to fill in the config file. :\nTip\nOnly mandatory fields are listed here. For customization and understand other settings, see the customization page.\nImportant\nThis page help you to configure your config.yml file. The ease the notation, the fields are written as 1 line. But, it is only to describe the yaml file.\nFor example, api.port: 8080 means that you have to write the following in your config.yml file:\napi: port: 8080 Field : api.jwt_secret Type: string Default: (empty) Description: A random 128 alphanumeric char string used to sign JWT tokens. Safe generation tool Field : api.private_key_path Type: string Default: \".secret/private.pem\" Description: Absolute path to the API private key used to sign vaults to guarantee their authenticity. This must be a PEM encoded RSA private key. If the file does not exist, it will be generated at startup. Field : api.public_key_path Type: string Default: \".secret/public.pem\" Description: Absolute path to the API public key used to verify vaults authenticity. This must be a PEM encoded RSA public key. If the file does not exist, it will be generated at startup. Field : api.flask_secret_key Type: string Default: (empty) Description: A random 128 alphanumeric char string used to encrypt flask session. Safe generation tool Field : api.server_side_encryption_key Type: string Default: (empty) Description: A random 128 alphanumeric char string used to encrypt data stored in the database that is not Encrypted by default by the ZKE flow. BE CAREFULL WITHOUT THIS KEY SOME OF SAVED DATA WILL BE UNREADABLE. DO NOT LOOSE THIS KEY. Safe generation tool Field : environment.type Type: string Default: \"production\" Description: This value is used to determine the logging level and security features enabling. Possible values are “local”, “development” and “production”. For security reasons, production instances should run under \"production\" type. Field : environment.config_version Type: string Default: 1.0 Description: DO NOT modify this value if not prompted to do so. Field : environment.domain Type: string Default: (empty) Description: Domain used by your instance. This is used to enforce the security of the API. The API must be served over HTTPS. Only include the domain name, without the protocol or path. The domain MUST be the same as the one used in the frontend. Field : database.database_uri Type: string Default: (empty) Description: The URI of the database to connect to. The URI must be in the format of \"mysql://user:password@host:port/db_name\" "},"title":"2 - API Setup"},"/v1.7/self-host/setup/database/":{"data":{"":"This is the final mandatory step to set up your Zero-TOTP instance. Zero-TOTP uses a MariaDB database, included in the docker-compose file. To mantain the security and integrity of your data, all the administration is delegated to the server owner. Make sure to make regular backups of your database and to secure it properly.\nBefore being able to start Zero-TOTP, you will need to set up your database.","initial-database-migration#Initial database migration":"For now, your database is empty and not initialized. You will need to run the initial database migration to create the necessary tables and data. A built-in administration script is provided to help you with this task.\nYou will be able to manage crucial database operations from the API. To set up you database please :\nStart your database docker compose up -d database\nStart your API docker compose up -d api\nMake sure the API is asking for a migration docker compose logs api -f --tail 100\nThe API is going to run but be unhealthy. This is expected, as the database is not yet initialized.\nHowever, the API should not be crashing or throwing errors. If it does, please check the logs for any issues, it may be related to your configuration file or the database connection.\nRun the initial database migration docker compose exec api /bin/sh -c \"./admin-toolbox.sh db-migrate\"\nRestart the API docker compose restart api\nThe API should now be healthy and ready to use. You can check the logs to make sure everything is working properly.\nAll done ?\nYou are now all set up ! 🎉🎉\nYou can just start your server docker compose up -d and enjoy. Make sure to visit the customization page to see all the features you can configure."},"title":"3 - Database Setup"},"/v1.7/self-host/setup/reverse-proxy/":{"data":{"":"","#":"A reverse proxy is mandatory to serve Zero-TOTP. The API is not designed to be served directly over the internet. You can use any reverse proxy you want, the following examples uses Nginx and Caddy, but any reverse proxy will work as long as it can serve the frontend and API over HTTPS and handle X-Forwarded-* headers (see below).\nGeneral considerations No matter which reverse proxy you choose, the following considerations must be taken into account:\nRouting and domain considerations :\nThe frontend and the API must be served on the same domain. Routes must be configured to serve the frontend at / and the API at /api/. Security considerations :\nThe frontend and API over HTTPS. This is mandatory to enabled the security features of Zero-TOTP. For security reasons the reverse proxy must overwrites the X-Forwarded-For header with the real remote ip. Warning\nBe careful to X-Forwarded-For that can be spoofed and must not be trusted. Zero-TOTP API is not meant to deal with a list of forwarded IP. The reverse proxy must keep the right one. Please refer to the documentation of your reverse proxy to see how to configure it properly.\nA special guide for revproxy behind Cloudflare is available below.\nImportant\nA bad configuration of the reverse proxy can lead to serious security issues. If you are not sure how to configure your reverse proxy, please use the provided examples, refer to the documentation of your reverse proxy or ask for help in the Zero-TOTP Discord server.\nCaddy example We are considering the API/frontend are running on the same server and the docker compose is configured to expose the API on port 8080 and the frontend on port 4200. Adapt the IP and port to your setup.\nHere is an example of a caddyfile that can be used to serve Zero-TOTP :\nCaddyfilehttps://zero-totp.example.com { // Serve the API reverse_proxy /api/* 127.0.0.1:8080 { header_up X-Forwarded-For {client_ip} } reverse_proxy 127.0.0.1:4200 } This is a basic configuration, make sure to adapt it to your needs. You can find more information on the Caddy documentation.\nNginx example Here is an example of an Nginx configuration that can be used to serve Zero-TOTP. This configuration assumes the API is running on port 8080 and the frontend on port 4200. Adapt the IP and port to your setup.\nnginx.confserver { listen 80; server_name zero-totp.example.com; # Redirect HTTP to HTTPS return 301 https://$host$request_uri; } server { listen 443 ssl; server_name zero-totp.example.com; # SSL configuration ssl_certificate /path/to/your/certificate.crt; ssl_certificate_key /path/to/your/private.key; # Serve the API location /api/ { proxy_pass http://127.0.1:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; } # Serve the frontend location / { proxy_pass http://127.0.1:4200; } } This is a basic configuration, make sure to adapt it to your needs. You can find more information on the Nginx documentation. Note that nginx does not handle TLS termination by itself, you will need to use a tool like Certbot to obtain and renew your SSL certificates.\nReverse proxy behind Cloudflare Cloudflare adds the X-Forwarded-For header if it does not exist, and if it does exist it will just append another IP to it. This means a client can forge their remote IP address with the most widely accepted remote IP header out of the box.\nTo prevent this, 2 solution are available:\nDo NOT use the X-Forwarded-For header, but use the CF-Connecting-IP header instead. This is the recommended solution. (See the Cloudflare documentation for more information). Follow this guide from Authelia’s team to configure cloudflare to safely handle the X-Forwarded-For header. "},"title":"1 -  Revproxy setup"},"/v1.8/":{"data":{"":" Free, open source, self-hosted Store your TOTP codes in a safe place Zero-TOTP is a 100% open-source, self-hostable and a Zero-Knowledge Infrastructure platform for storing TOTP codes.  "},"title":"Zero-TOTP Documentation"},"/v1.8/self-host/":{"data":{"":"Zero-TOTP is one of the most secure and easy way to store TOTP codes. For a maximum security, you can easily self-host Zero-TOTP yourself and control 100% of your data, installation, configuration and updates.\nThis guide will help you to install and configure Zero-TOTP on your server.\nThe self-hosting is designed to implement as much as default security features as possible. However, configuration is the key to a secure and reliable Zero-TOTP instance.\nBefore starting, make sure to be confortable with the following concepts:\nDocker and docker-compose Reverse proxy (Nginx, Traefik, Caddy, etc.) Basic Linux commands Yaml syntax Tip\nIf you have any question or doubt, you can ask for help in the Zero-TOTP Discord server or in the Zero-TOTP GitHub discussions\nInstallation mandatory Setup mandatory Customization recommended "},"title":"Self-hosting Zero-TOTP"},"/v1.8/self-host/admin/":{"data":{"":"During the whole life of your Zero-TOTP instance, you will need to perform some administrative tasks. This page will help you to perform these tasks.\nAmong the task you might need to perform, you will find:\nDatabase backup and restore (database backup is more than heavily recommended !) Database migration (when upgrading Zero-TOTP version) Database backup "},"title":"Admin"},"/v1.8/self-host/admin/database-backup/":{"data":{"":"","backup-your-database#Backup your database":"","restore-a-database-backup#Restore a database backup":"Backing up your database is important to prevent data loss. You can use the mariadb-dump utility to backup your database.\nBackup your database Note\nIf you are not using environment variables in docker, make sure to update \"$MYSQL_DATABASE\" and \"$MYSQL_ROOT_PASSWORD\".\nTo backup your database, you can use the following commands on your host :\nDatabase backup commanddocker compose exec database /bin/bash -c 'mariadb-dump --databases $MYSQL_DATABASE --user=root --password=$MYSQL_ROOT_PASSWORD \u003e /var/lib/mysql/db_backup_$(date +%Y%m%d_%H%M%S).sql' Warning\nBackup location :\nThe backup file will be named db_backup_*.log The backup file will be saved in the /var/lib/mysql directory of the database container which is a mounted volume in your host. Check the mount point in your docker-compose.yml file to find the backup file. Important\nIt is highly recommended to copy the backups files into an external filesystem and verify they are not empty !\nRestore a database backup Make sure to mount the backup file into the database container before running the restore command. You can use the /var/lib/mysql mounted volume to copy the backup file into the container. The default path for the mounted volume is $pwd/database/config/.\nNote\nIf you are not using environment variables in docker, make sure to update \"$MYSQL_DATABASE\" and \"$MYSQL_ROOT_PASSWORD\".\nRestore backupdocker compose exec database /bin/sh -c 'mariadb --user=root --password=$MYSQL_ROOT_PASSWORD \u003c $PATH_TO_SQL_FILE_IN_DOCKER_CONTAINER.sql' "},"title":"Database Backup"},"/v1.8/self-host/admin/database-migration/":{"data":{"":"When you are upgrading Zero-TOTP, you may need to migrate your database to the new version. If this is the case, it will be mentioned in the release notes and the API will refuse to start.\nTo avoid any data loss, you will have to perform the migration yourself after having made a backup of your database.","how-to-migrate-your-database#How to migrate your database":"1 - Backup your database Before performing any migration, it is highly recommended to backup your database. You can follow the Backup and restore documentation to backup your database.\n2 - Run the migration script Zero-TOTP provides a built-in migration script, directly in the API docker container to help you migrate your database.\nYou can run the migration script using the following command:\nRun migration scriptdocker compose exec api /bin/sh -c \"./admin-toolbox.sh db-migrate\" Follow the instructions to complete the migration.\nNote\nThe API will perform the migration on the database and will update the database schema to the latest version. Therefore, the database must be up and running !\n3 - Restart the API After the migration is complete, you will need to restart the API to apply the changes. You can do this by running:\nRestart APIdocker compose restart api "},"title":"Database Migration"},"/v1.8/self-host/admin/google_drive_backup/":{"data":{"":"Zero-TOTP offers a very important feature to ensure the availability of your users’ data: automatic backups to Google Drive. This feature allows users to automatically backup their data to their Google Drive account, ensuring that they can restore their data in case of loss, corruption or downtime.\nBy default, this feature is disabled since it requires this tenant of Zero-TOTP to be authorized by the user to access their Google Drive account (via OAuth2).","how-to-enable-google-drive-backups#How to enable Google Drive backups":"1 - Create an Oauth consent screen Recommended : Google documentation To enable Google Drive backups, you first need to create an OAuth consent screen. This screen is necessary for users to authorize your application to access their Google Drive account. Follow these steps:\nGo to the Google Cloud Console. Create a new project or select an existing one. Navigate to the APIs \u0026 Services section. Click on OAuth consent screen in the left sidebar. Select the External user type. Fill in the required fields such as App name, User support email, and Developer contact information. 2 - Register your application on Google Cloud Recommended : Google documentation To enable Google Drive backups, you need to register your application on Google Cloud and obtain the necessary credentials. Follow these steps:\nGo to the Google Cloud Console. Select the project you created in the previous step. Navigate to the APIs \u0026 Services section. Click on Credentials in the left sidebar. Click on Create credentials and select OAuth client ID. Configure the consent screen by providing the necessary information (application name, support email, etc.). Select Web application as the application type. Add the following authorized Javascript origins: https://\u003cyour-domain\u003e Replace \u003cyour-domain\u003e with your actual domain name. Add the following redirect URI: https://\u003cyour-domain\u003e/api/v1/google-drive/oauth/callback Replace \u003cyour-domain\u003e with your actual domain name. Click on Create to generate your OAuth client ID and secret. Download the JSON file containing your credentials. This file will be used to configure Zero-TOTP. 3 - Configure Google Drive access Go to the Google Cloud Console. Select the project you created in the previous step. Navigate to the APIs \u0026 Services section. Click on Library in the left sidebar. Search for Google Drive API and click on it. Click on the Enable button to enable the Google Drive API for your project. Go back to APIs \u0026 Services and click on Oauth Consent Screen in the left sidebar. Click on Data Access in the left sidebar. Click on Add or remove scopes. Add the following scopes: .../auth/drive.appdata .../auth/drive.file Click on Update to save the changes. Publish your OAuth consent screen by clicking on the Publish App button. You will need to fill in some additional information such as the application homepage, privacy policy URL, and terms of service URL. Google will review your application before it can be published. This process may take some time, so be patient. In the meantime, you can test the Google Drive backups feature in development mode. In development mode, only whitelisted users can use the Oauth consent screen. You can add users to the whitelist by going to the OAuth consent screen page in the Google Cloud Console and clicking on the Test users tab. Add the email addresses of the users you want to whitelist. 4 - Configure Zero-TOTP Upload the JSON file containing your credentials to the Zero-TOTP server host. Mount the file into the Zero-TOTP API container. You can choose the path you want. The most convenient way is to use the already mounted /api/config/ directory. Edit the config.yml file of your Zero-TOTP instance and configure the following fields : config.yml (partial)# [...] features: google_drive_backup: enabled: true client_secret_file_path: \"/api/config/your_client_secret_file.json\" # Path to the JSON file containing your credentials # [...] "},"title":"Google Drive backups"},"/v1.8/self-host/customization/":{"data":{"":"Beside mandatory fields, it is highly recommended customizing your Zero-TOTP instance to fit your needs and network architecture.\nThis page will guide you through the customization process and explain how to properly configure Zero-TOTP.\nImportant\nThis page help you to configure your config.yml file. The ease the notation, the fields are written as 1 line. But, it is only to describe the yaml file.\nFor example, api.port: 8080 means that you have to write the following in your config.yml file:\napi: port: 8080 ","features-customization-recommended#Features customization (recommended)":"This parts helps you customize the enabled features of Zero-TOTP. Unlike the API customization, keeping the default configuration will not impact the API behavior or its security, but will disable some features.\nDefault values are provided to keeo Zero-TOTP as plug and play as possible. But it is recommended to adapt those values to fit your needs.\nGoogle Drive automatic backup Note\nBefore being able to configure Google Drive automatic backup, you must first register your application as a Google Oauth client. See the How to configure Google Drive automatic backup for more information.\nOne key feature of Zero-TOTP is the possibility for users to automatically backup their vaults to Google Drive. To enable this feature, you must register you application as a Google Oauth client and give the following information :\nField: features.google_drive_backup.enabled Type: bool Default: false Description: Enable Google Drive automatic backup feature. If set to true, below setting will have to be filled. Field: features.google_drive_backup.client_secret_file_path Type: string Default: \"\" Description: The path to the client secret file used to authenticate with Google Drive. This file must be in JSON format and contain the OAuth credentials. See the How to configure Google Drive automatic backup for more information. Automatic backup configuration For now, only Google Drive automatic backup is supported. But the below configuration is used for every backup provider. The main goal is to define the default backup frequency and the minimum number of backups to keep. Users will be able to override those settings in their profile.\nField: features.default_backup_configuration.backup_minimum_count Type: int Default: 20 Description: Minimum number of backups Zero-TOTP will ever keep in user’s Google Drive. Default : no matter what, Zero-TOTP will always keep at least the 20 last backups in user’s Google Drive. Field: features.default_backup_configuration.max_age_in_days Type: int Default: 30 Description: Backups minimum age. If backups are older than this parameter, in days, and if the above parameter is also matched, backups will be deleted. Default : 30 days Emails The email feature is used to send emails to users. The main purpose is to send verification emails to your users when signing up, but also for password reset. STARTTLS is required.\nIf you disable emails, users will not be prompted to validate their email.\nField : features.emails.require_email_validation Type: bool Default: false Description: Require email validation for new users. If set to true, below settings will have to be filled. Field : features.emails.email_sender_address Type: string Default: \"\" Description: Sender email address. Can be example@domain.com or Example \u003cexample@domain.com\u003e. Field : features.emails.email_smtp_port Type: int Default: \"\" Description: SMTP port to use. STARTTLS will be used. Field : features.emails.email_smtp_username Type: string Default: \"\" Description: Username used to authenticate to SMTP server. STARTTLS will be used. Field : features.emails.email_smtp_password Type: string Default: \"\" Description: Password used to authenticate to SMTP server. STARTTLS will be used. Rate limiting Zero-TOTP has a built-in rate limiting feature to prevent abuse of the API and more specifically protect the login endpoint and email verification endpoint. This feature is enabled by default.\nField: features.rate_limiting.login_attempts_limit_per_ip Type: int Default: 10 Description: Max consecutive failed login per IP within 1h. Default : max 10 failed login per 1h per IP Field: features.rate_limiting.login_ban_time Type: int Default: 15 Description: If the previous condition is matched, this value defines to ban time, per IP, in minutes, from login. Default: 15min Field: features.rate_limiting.send_email_attempts_limit_per_user Type: int Default: 5 Description: Max consecutive verification email sent to a user within 1 hour. Default : max 5 consecutive verification email sent per hour per user. Field: features.rate_limiting.send_email_ban_time Type: int Default: 60 Description: If the previous condition is matched, this value defines to ban time, per user, in minutes, from requesting a new verification email. Default: 60min Sentry Zero-TOTP has a built-in Sentry integration to report errors and exceptions. This feature is disabled by default.\nField : features.sentry.dsn Type: string Default: \"\" Description: Sentry DSN URL. For more information, see the Sentry documentation. "},"title":"Customization"},"/v1.8/self-host/installation/":{"data":{"":"","how-images-tags-work#How images tags work":"Zero-TOTP supports installation via Docker. This guide will help you to set up Zero-TOTP on your server.\nRequirements To self-host Zero-TOTP, you need the following components:\nDocker (and docker compose for easier management) Installation via docker-compose Create the following docker-compose.yml :\ndocker-compose.ymlservices: frontend: container_name: frontend image: ghcr.io/seaweedbraincy/zero-totp-frontend:1.8 environment: USER_UID: 101 USER_GID: 101 ports: - 4200:80 volumes: - ./frontend/log:/var/log/nginx restart: always api: container_name: api image: ghcr.io/seaweedbraincy/zero-totp-api:1.8 environment: USER_UID: 1001 USER_GID: 1001 ports: - 8080:8080 volumes: - ./api/secret:/api/secret - ./api/logs:/api/logs - ./api/config:/api/config restart: always database: environment: MYSQL_ROOT_PASSWORD: weak_password ## CHANGE_ME MYSQL_DATABASE: zero_totp MYSQL_USER: api MYSQL_PASSWORD: weak_password ## CHANGE_ME image: mariadb:11 container_name: database ports: - \"127.0.0.1:3306:3306\" volumes: - ./database/data:/var/lib/mysql - ./database/config:/etc/mysql restart: always Warning\nMake sure to change the MYSQL_ROOT_PASSWORD and MYSQL_PASSWORD to a strong password.\nHow images tags work Official and stable releases of Zero-TOTP are disclosed in Github releases page.\nThey always work with the same version of the API and the frontend. Version tag format is vX.Y.Z where X is the major version, Y is the minor version and Z is the patch version.\nEach new release is always associated with 3 tags:\nX.Y.Z, the last exact stable version of Zero-TOTP. X.Y, the last stable version of Zero-TOTP. You can safely use this and regularly upgrade to get the last patches, without worrying about breaking changes. latest, the last stable version of Zero-TOTP. Note\nIt is highly recommended to use the X.Y tag to ensure you are always using the latest stable version of Zero-TOTP without worrying about breaking changes.\nUsing latest tag is not recommended as it may lead to unexpected breaking changes if a new major version is released.","installation-via-docker-compose#Installation via docker-compose":"","requirements#Requirements":""},"title":"Installation"},"/v1.8/self-host/setup/":{"data":{"":"Before starting using your Zero-TOTP instance, you need to set it up. This guide will help you to set up Zero-TOTP on your server. This setup is mandatory. To further customize your instance, please refer to the customization page.\n1 - Reverse proxy setup Mandatory 2 - API setup Mandatory 3 - Database setup Mandatory 4 - Customization Recommended "},"title":"Setup"},"/v1.8/self-host/setup/api/":{"data":{"":"Zero-TOTP is configured via a yaml config file that must be mounted in the container. You can follow the volume mounting of the installation or use your own. In anyway, the config file should be located and named : /api/config/config.yml in the API container.\nYou can download the default config file :\ncurl https://raw.githubusercontent.com/SeaweedbrainCY/zero-totp/refs/tags/v1.8.0/api/config/config-example.yml --create-dirs -o ./api/config/config.yml or copy the content of the default config file and paste it in a file named ./api/config/config.yml.\nNote\nSeveral fields are mandatory in the config file. You must fill them to make Zero-TOTP work. If fields are missing, the API will fail to start.","mandatory-configuration-fields#Mandatory configuration fields":"Here are the list of mandatory fields you need to fill in the config file. :\nTip\nOnly mandatory fields are listed here. For customization and understand other settings, see the customization page.\nImportant\nThis page help you to configure your config.yml file. To ease the notation, the fields are written as 1 line. But, it is only to describe the yaml file.\nFor example, api.port: 8080 means that you have to write the following in your config.yml file:\napi: port: 8080 Field : api.private_key_path Type: string Default: \".secret/private.pem\" Description: Absolute path to the API private key used to sign vaults to guarantee their authenticity. This must be a PEM encoded RSA private key. If the file does not exist, it will be generated at startup. Field : api.public_key_path Type: string Default: \".secret/public.pem\" Description: Absolute path to the API public key used to verify vaults authenticity. This must be a PEM encoded RSA public key. If the file does not exist, it will be generated at startup. Field : api.flask_secret_key Type: string Default: (empty) Description: A random 128 alphanumeric char string used to encrypt flask session. Safe generation tool Field : api.server_side_encryption_key Type: string Default: (empty) Description: A random 128 alphanumeric char string used to encrypt data stored in the database that is not Encrypted by default by the ZKE flow. BE CAREFULL WITHOUT THIS KEY SOME OF SAVED DATA WILL BE UNREADABLE. DO NOT LOOSE THIS KEY. Safe generation tool Field : environment.type Type: string Default: \"production\" Description: This value is used to determine the logging level and security features enabling. Possible values are “local”, “development” and “production”. For security reasons, production instances should run under \"production\" type. Field : environment.config_version Type: string Default: 1.0 Description: DO NOT modify this value if not prompted to do so. Field : environment.domain Type: string Default: (empty) Description: Domain used by your instance. This is used to enforce the security of the API. The API must be served over HTTPS. Only include the domain name, without the protocol or path. The domain MUST be the same as the one used in the frontend. Field : database.database_uri Type: string Default: (empty) Description: The URI of the database to connect to. The URI must be in the format of \"mysql://user:password@host:port/db_name\" "},"title":"2 - API Setup"},"/v1.8/self-host/setup/database/":{"data":{"":"This is the final mandatory step to set up your Zero-TOTP instance. Zero-TOTP uses a MariaDB database, included in the docker-compose file. To mantain the security and integrity of your data, all the administration is delegated to the server owner. Make sure to make regular backups of your database and to secure it properly.\nBefore being able to start Zero-TOTP, you will need to set up your database.","initial-database-migration#Initial database migration":"For now, your database is empty and not initialized. You will need to run the initial database migration to create the necessary tables and data. A built-in administration script is provided to help you with this task.\nYou will be able to manage crucial database operations from the API. To set up you database please :\nStart your database docker compose up -d database\nMake sure the database is running and ready docker compose logs database -f --tail 100\nStart your API docker compose up -d api\nMake sure the API is asking for a migration docker compose logs api -f --tail 100\nYou should see the following message\napi | ERROR [alembic.util.messaging] Target database is not up to date. api | FAILED: Target database is not up to date. api | ❌ Your database is not up to date. Follow Zero-TOTP's documentation to update it. api | 📚 https://docs.zero-totp.com/latest/self-host/admin/database-migration/ api | 🕛 Docker will wait for your action to continue This is expected, as the database is not yet initialized.\nHowever, the API should not be crashing or throwing errors not related to database migration. If it does, please check the logs for any issues, it may be related to your configuration file or the database connection.\nRun the initial database migration docker compose exec api /bin/sh -c \"./admin-toolbox.sh db-migrate\"\nRestart the API docker compose restart api\nThe API should now be healthy and ready to use. You can check the logs to make sure everything is working properly.\nAll done ?\nYou are now all set up ! 🎉🎉\nYou can just start your server docker compose up -d and enjoy. Make sure to visit the customization page to see all the features you can configure."},"title":"3 - Database Setup"},"/v1.8/self-host/setup/reverse-proxy/":{"data":{"":"","#":"A reverse proxy is mandatory to serve Zero-TOTP. The API is not designed to be served directly over the internet. You can use any reverse proxy you want, the following examples uses Nginx and Caddy, but any reverse proxy will work as long as it can serve the frontend and API over HTTPS and handle X-Forwarded-* headers (see below).\nRevproxy requirements No matter which reverse proxy you choose, the following considerations must be taken into account:\nRouting and domain considerations :\nThe frontend and the API must be served on the same domain. Route / must serve the frontend. Route /api/ must serve the API. The requests to the API must contain the /api prefix. Security considerations :\nThe frontend and API over HTTPS. This is mandatory to enable the security features of Zero-TOTP. For security reasons the reverse proxy must overwrite the X-Forwarded-For header with the real remote ip. Warning\nBe careful to X-Forwarded-For that can be spoofed and must not be trusted. Zero-TOTP API is not meant to deal with a list of forwarded IP. The reverse proxy must keep the right one. Please refer to the documentation of your reverse proxy to see how to configure it properly.\nA special guide for revproxy behind Cloudflare is available below.\nImportant\nA bad configuration of the reverse proxy can lead to serious security issues. If you are not sure how to configure your reverse proxy, please use the provided examples, refer to the documentation of your reverse proxy or ask for help in the Zero-TOTP Discord server.\nCaddy example We are considering the API/frontend are running on the same server and the docker compose is configured to expose the API on port 8080 and the frontend on port 4200. Adapt the IP and port to your setup.\nHere is an example of a caddyfile that can be used to serve Zero-TOTP :\nCaddyfilehttps://zero-totp.example.com { # Serve the API reverse_proxy /api/* 127.0.0.1:8080 { header_up X-Forwarded-For {client_ip} } reverse_proxy 127.0.0.1:4200 } This is a basic configuration, make sure to adapt it to your needs. You can find more information on the Caddy documentation.\nNginx example Here is an example of an Nginx configuration that can be used to serve Zero-TOTP. This configuration assumes the API is running on port 8080 and the frontend on port 4200. Adapt the IP and port to your setup.\nnginx.confserver { listen 80; server_name zero-totp.example.com; # Redirect HTTP to HTTPS return 301 https://$host$request_uri; } server { listen 443 ssl; server_name zero-totp.example.com; # SSL configuration ssl_certificate /path/to/your/certificate.crt; ssl_certificate_key /path/to/your/private.key; # Serve the API location /api/ { proxy_pass http://127.0.1:8080/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; } # Serve the frontend location / { proxy_pass http://127.0.1:4200; } } This is a basic configuration, make sure to adapt it to your needs. You can find more information on the Nginx documentation. Note that nginx does not handle TLS termination by itself, you will need to use a tool like Certbot to obtain and renew your SSL certificates.\nReverse proxy behind Cloudflare Cloudflare adds the X-Forwarded-For header if it does not exist, and if it does exist it will just append another IP to it. This means a client can forge their remote IP address with the most widely accepted remote IP header out of the box.\nTo prevent this, 2 solution are available:\nDo NOT use the X-Forwarded-For header, but use the CF-Connecting-IP header instead. This is the recommended solution. (See the Cloudflare documentation for more information). Follow this guide from Authelia’s team to configure cloudflare to safely handle the X-Forwarded-For header. "},"title":"1 -  Revproxy setup"},"/v1.9/":{"data":{"":" Free, open source, self-hosted Store your TOTP codes in a safe place Zero-TOTP is a 100% open-source, self-hostable and a Zero-Knowledge Infrastructure platform for storing TOTP codes.  "},"title":"Zero-TOTP Documentation"},"/v1.9/self-host/":{"data":{"":"Zero-TOTP is one of the most secure and easy way to store TOTP codes. For a maximum security, you can easily self-host Zero-TOTP yourself and control 100% of your data, installation, configuration and updates.\nThis guide will help you to install and configure Zero-TOTP on your server.\nThe self-hosting is designed to implement as much as default security features as possible. However, configuration is the key to a secure and reliable Zero-TOTP instance.\nBefore starting, make sure to be confortable with the following concepts:\nDocker and docker-compose Reverse proxy (Nginx, Traefik, Caddy, etc.) Basic Linux commands Yaml syntax Tip\nIf you have any question or doubt, you can ask for help in the Zero-TOTP Discord server or in the Zero-TOTP GitHub discussions\nInstallation mandatory Setup mandatory Customization recommended "},"title":"Self-hosting Zero-TOTP"},"/v1.9/self-host/admin/":{"data":{"":"During the whole life of your Zero-TOTP instance, you will need to perform some administrative tasks. This page will help you to perform these tasks.\nAmong the task you might need to perform, you will find:\nDatabase backup and restore (database backup is more than heavily recommended !) Database migration (when upgrading Zero-TOTP version) Database backup "},"title":"Admin"},"/v1.9/self-host/admin/database-backup/":{"data":{"":"","backup-your-database#Backup your database":"","restore-a-database-backup#Restore a database backup":"Backing up your database is important to prevent data loss. You can use the mariadb-dump utility to backup your database.\nBackup your database Note\nIf you are not using environment variables in docker, make sure to update \"$MYSQL_DATABASE\" and \"$MYSQL_ROOT_PASSWORD\".\nTo backup your database, you can use the following commands on your host :\nDatabase backup commanddocker compose exec database /bin/bash -c 'mariadb-dump --databases $MYSQL_DATABASE --user=root --password=$MYSQL_ROOT_PASSWORD \u003e /var/lib/mysql/db_backup_$(date +%Y%m%d_%H%M%S).sql' Warning\nBackup location :\nThe backup file will be named db_backup_*.log The backup file will be saved in the /var/lib/mysql directory of the database container which is a mounted volume in your host. Check the mount point in your docker-compose.yml file to find the backup file. Important\nIt is highly recommended to copy the backups files into an external filesystem and verify they are not empty !\nRestore a database backup Make sure to mount the backup file into the database container before running the restore command. You can use the /var/lib/mysql mounted volume to copy the backup file into the container. The default path for the mounted volume is $pwd/database/config/.\nNote\nIf you are not using environment variables in docker, make sure to update \"$MYSQL_DATABASE\" and \"$MYSQL_ROOT_PASSWORD\".\nRestore backupdocker compose exec database /bin/sh -c 'mariadb --user=root --password=$MYSQL_ROOT_PASSWORD \u003c $PATH_TO_SQL_FILE_IN_DOCKER_CONTAINER.sql' "},"title":"Database Backup"},"/v1.9/self-host/admin/database-migration/":{"data":{"":"When you are upgrading Zero-TOTP, you may need to migrate your database to the new version. If this is the case, it will be mentioned in the release notes and the API will refuse to start.\nTo avoid any data loss, you will have to perform the migration yourself after having made a backup of your database.","how-to-migrate-your-database#How to migrate your database":"1 - Backup your database Before performing any migration, it is highly recommended to backup your database. You can follow the Backup and restore documentation to backup your database.\n2 - Run the migration script Zero-TOTP provides a built-in migration script, directly in the API docker container to help you migrate your database.\nYou can run the migration script using the following command:\nRun migration scriptdocker compose exec api /bin/sh -c \"./admin-toolbox.sh db-migrate\" Follow the instructions to complete the migration.\nNote\nThe API will perform the migration on the database and will update the database schema to the latest version. Therefore, the database must be up and running !\n3 - Restart the API After the migration is complete, you will need to restart the API to apply the changes. You can do this by running:\nRestart APIdocker compose restart api "},"title":"Database Migration"},"/v1.9/self-host/admin/google_drive_backup/":{"data":{"":"Zero-TOTP offers a very important feature to ensure the availability of your users’ data: automatic backups to Google Drive. This feature allows users to automatically backup their data to their Google Drive account, ensuring that they can restore their data in case of loss, corruption or downtime.\nBy default, this feature is disabled since it requires this tenant of Zero-TOTP to be authorized by the user to access their Google Drive account (via OAuth2).","how-to-enable-google-drive-backups#How to enable Google Drive backups":"1 - Create an Oauth consent screen Recommended : Google documentation To enable Google Drive backups, you first need to create an OAuth consent screen. This screen is necessary for users to authorize your application to access their Google Drive account. Follow these steps:\nGo to the Google Cloud Console. Create a new project or select an existing one. Navigate to the APIs \u0026 Services section. Click on OAuth consent screen in the left sidebar. Select the External user type. Fill in the required fields such as App name, User support email, and Developer contact information. 2 - Register your application on Google Cloud Recommended : Google documentation To enable Google Drive backups, you need to register your application on Google Cloud and obtain the necessary credentials. Follow these steps:\nGo to the Google Cloud Console. Select the project you created in the previous step. Navigate to the APIs \u0026 Services section. Click on Credentials in the left sidebar. Click on Create credentials and select OAuth client ID. Configure the consent screen by providing the necessary information (application name, support email, etc.). Select Web application as the application type. Add the following authorized Javascript origins: https://\u003cyour-domain\u003e Replace \u003cyour-domain\u003e with your actual domain name. Add the following redirect URI: https://\u003cyour-domain\u003e/api/v1/google-drive/oauth/callback Replace \u003cyour-domain\u003e with your actual domain name. Click on Create to generate your OAuth client ID and secret. Download the JSON file containing your credentials. This file will be used to configure Zero-TOTP. 3 - Configure Google Drive access Go to the Google Cloud Console. Select the project you created in the previous step. Navigate to the APIs \u0026 Services section. Click on Library in the left sidebar. Search for Google Drive API and click on it. Click on the Enable button to enable the Google Drive API for your project. Go back to APIs \u0026 Services and click on Oauth Consent Screen in the left sidebar. Click on Data Access in the left sidebar. Click on Add or remove scopes. Add the following scopes: .../auth/drive.appdata .../auth/drive.file Click on Update to save the changes. Publish your OAuth consent screen by clicking on the Publish App button. You will need to fill in some additional information such as the application homepage, privacy policy URL, and terms of service URL. Google will review your application before it can be published. This process may take some time, so be patient. In the meantime, you can test the Google Drive backups feature in development mode. In development mode, only whitelisted users can use the Oauth consent screen. You can add users to the whitelist by going to the OAuth consent screen page in the Google Cloud Console and clicking on the Test users tab. Add the email addresses of the users you want to whitelist. 4 - Configure Zero-TOTP Upload the JSON file containing your credentials to the Zero-TOTP server host. Mount the file into the Zero-TOTP API container. You can choose the path you want. The most convenient way is to use the already mounted /api/config/ directory. Edit the config.yml file of your Zero-TOTP instance and configure the following fields : config.yml (partial)# [...] features: google_drive_backup: enabled: true client_secret_file_path: \"/api/config/your_client_secret_file.json\" # Path to the JSON file containing your credentials # [...] "},"title":"Google Drive backups"},"/v1.9/self-host/customization/":{"data":{"":"Beside mandatory fields, it is highly recommended customizing your Zero-TOTP instance to fit your needs and network architecture.\nThis page will guide you through the customization process and explain how to properly configure Zero-TOTP.\nImportant\nThis page help you to configure your config.yml file. The ease the notation, the fields are written as 1 line. But, it is only to describe the yaml file.\nFor example, api.port: 8080 means that you have to write the following in your config.yml file:\napi: port: 8080 ","features-customization-recommended#Features customization (recommended)":"This parts helps you customize the enabled features of Zero-TOTP. Unlike the API customization, keeping the default configuration will not impact the API behavior or its security, but will disable some features.\nDefault values are provided to keeo Zero-TOTP as plug and play as possible. But it is recommended to adapt those values to fit your needs.\nGoogle Drive automatic backup Note\nBefore being able to configure Google Drive automatic backup, you must first register your application as a Google Oauth client. See the How to configure Google Drive automatic backup for more information.\nOne key feature of Zero-TOTP is the possibility for users to automatically backup their vaults to Google Drive. To enable this feature, you must register you application as a Google Oauth client and give the following information :\nField: features.google_drive_backup.enabled Type: bool Default: false Description: Enable Google Drive automatic backup feature. If set to true, below setting will have to be filled. Field: features.google_drive_backup.client_secret_file_path Type: string Default: \"\" Description: The path to the client secret file used to authenticate with Google Drive. This file must be in JSON format and contain the OAuth credentials. See the How to configure Google Drive automatic backup for more information. Automatic backup configuration For now, only Google Drive automatic backup is supported. But the below configuration is used for every backup provider. The main goal is to define the default backup frequency and the minimum number of backups to keep. Users will be able to override those settings in their profile.\nField: features.default_backup_configuration.backup_minimum_count Type: int Default: 20 Description: Minimum number of backups Zero-TOTP will ever keep in user’s Google Drive. Default : no matter what, Zero-TOTP will always keep at least the 20 last backups in user’s Google Drive. Field: features.default_backup_configuration.max_age_in_days Type: int Default: 30 Description: Backups minimum age. If backups are older than this parameter, in days, and if the above parameter is also matched, backups will be deleted. Default : 30 days Emails The email feature is used to send emails to users. The main purpose is to send verification emails to your users when signing up, but also for password reset. STARTTLS is required.\nIf you disable emails, users will not be prompted to validate their email.\nField : features.emails.require_email_validation Type: bool Default: false Description: Require email validation for new users. If set to true, below settings will have to be filled. Field : features.emails.email_sender_address Type: string Default: \"\" Description: Sender email address. Can be example@domain.com or Example \u003cexample@domain.com\u003e. Field : features.emails.email_smtp_port Type: int Default: \"\" Description: SMTP port to use. STARTTLS will be used. Field : features.emails.email_smtp_username Type: string Default: \"\" Description: Username used to authenticate to SMTP server. STARTTLS will be used. Field : features.emails.email_smtp_password Type: string Default: \"\" Description: Password used to authenticate to SMTP server. STARTTLS will be used. Rate limiting Zero-TOTP has a built-in rate limiting feature to prevent abuse of the API and more specifically protect the login endpoint and email verification endpoint. This feature is enabled by default.\nField: features.rate_limiting.login_attempts_limit_per_ip Type: int Default: 10 Description: Max consecutive failed login per IP within 1h. Default : max 10 failed login per 1h per IP Field: features.rate_limiting.login_ban_time Type: int Default: 15 Description: If the previous condition is matched, this value defines to ban time, per IP, in minutes, from login. Default: 15min Field: features.rate_limiting.send_email_attempts_limit_per_user Type: int Default: 5 Description: Max consecutive verification email sent to a user within 1 hour. Default : max 5 consecutive verification email sent per hour per user. Field: features.rate_limiting.send_email_ban_time Type: int Default: 60 Description: If the previous condition is matched, this value defines to ban time, per user, in minutes, from requesting a new verification email. Default: 60min Sentry Zero-TOTP has a built-in Sentry integration to report errors and exceptions. This feature is disabled by default.\nField : features.sentry.dsn Type: string Default: \"\" Description: Sentry DSN URL. For more information, see the Sentry documentation. "},"title":"Customization"},"/v1.9/self-host/installation/":{"data":{"":"","how-images-tags-work#How images tags work":"Zero-TOTP supports installation via Docker. This guide will help you to set up Zero-TOTP on your server.\nRequirements To self-host Zero-TOTP, you need the following components:\nDocker (and docker compose for easier management) Installation via docker-compose Create the following docker-compose.yml :\ndocker-compose.ymlservices: frontend: container_name: frontend image: ghcr.io/seaweedbraincy/zero-totp-frontend:1.9 environment: USER_UID: 101 USER_GID: 101 ports: - 4200:80 volumes: - ./frontend/log:/var/log/nginx restart: always api: container_name: api image: ghcr.io/seaweedbraincy/zero-totp-api:1.9 environment: USER_UID: 1001 USER_GID: 1001 ports: - 8080:8080 volumes: - ./api/secret:/api/secret - ./api/logs:/api/logs - ./api/config:/api/config restart: always database: environment: MYSQL_ROOT_PASSWORD: weak_password ## CHANGE_ME MYSQL_DATABASE: zero_totp MYSQL_USER: api MYSQL_PASSWORD: weak_password ## CHANGE_ME image: mariadb:11 container_name: database ports: - \"127.0.0.1:3306:3306\" volumes: - ./database/data:/var/lib/mysql - ./database/config:/etc/mysql restart: always Warning\nMake sure to change the MYSQL_ROOT_PASSWORD and MYSQL_PASSWORD to a strong password.\nHow images tags work Official and stable releases of Zero-TOTP are disclosed in Github releases page.\nThey always work with the same version of the API and the frontend. Version tag format is vX.Y.Z where X is the major version, Y is the minor version and Z is the patch version.\nEach new release is always associated with 3 tags:\nX.Y.Z, the last exact stable version of Zero-TOTP. X.Y, the last stable version of Zero-TOTP. You can safely use this and regularly upgrade to get the last patches, without worrying about breaking changes. latest, the last stable version of Zero-TOTP. Note\nIt is highly recommended to use the X.Y tag to ensure you are always using the latest stable version of Zero-TOTP without worrying about breaking changes.\nUsing latest tag is not recommended as it may lead to unexpected breaking changes if a new major version is released.","installation-via-docker-compose#Installation via docker-compose":"","requirements#Requirements":""},"title":"Installation"},"/v1.9/self-host/setup/":{"data":{"":"Before starting using your Zero-TOTP instance, you need to set it up. This guide will help you to set up Zero-TOTP on your server. This setup is mandatory. To further customize your instance, please refer to the customization page.\n1 - Reverse proxy setup Mandatory 2 - API setup Mandatory 3 - Database setup Mandatory 4 - Customization Recommended "},"title":"Setup"},"/v1.9/self-host/setup/api/":{"data":{"":"Zero-TOTP is configured via a yaml config file that must be mounted in the container. You can follow the volume mounting of the installation or use your own. In anyway, the config file should be located and named : /api/config/config.yml in the API container.\nYou can download the default config file :\ncurl https://raw.githubusercontent.com/SeaweedbrainCY/zero-totp/refs/tags/v1.9.0/api/config/config-example.yml --create-dirs -o ./api/config/config.yml or copy the content of the default config file and paste it in a file named ./api/config/config.yml.\nNote\nSeveral fields are mandatory in the config file. You must fill them to make Zero-TOTP work. If fields are missing, the API will fail to start.","mandatory-configuration-fields#Mandatory configuration fields":"Here are the list of mandatory fields you need to fill in the config file. :\nTip\nOnly mandatory fields are listed here. For customization and understand other settings, see the customization page.\nImportant\nThis page help you to configure your config.yml file. To ease the notation, the fields are written as 1 line. But, it is only to describe the yaml file.\nFor example, api.port: 8080 means that you have to write the following in your config.yml file:\napi: port: 8080 Field : api.private_key_path Type: string Default: \".secret/private.pem\" Description: Absolute path to the API private key used to sign vaults to guarantee their authenticity. This must be a PEM encoded RSA private key. If the file does not exist, it will be generated at startup. Field : api.public_key_path Type: string Default: \".secret/public.pem\" Description: Absolute path to the API public key used to verify vaults authenticity. This must be a PEM encoded RSA public key. If the file does not exist, it will be generated at startup. Field : api.flask_secret_key Type: string Default: (empty) Description: A random 128 alphanumeric char string used to encrypt flask session. Safe generation tool Field : api.server_side_encryption_key Type: string Default: (empty) Description: A random 128 alphanumeric char string used to encrypt data stored in the database that is not Encrypted by default by the ZKE flow. BE CAREFULL WITHOUT THIS KEY SOME OF SAVED DATA WILL BE UNREADABLE. DO NOT LOOSE THIS KEY. Safe generation tool Field : environment.type Type: string Default: \"production\" Description: This value is used to determine the logging level and security features enabling. Possible values are “local”, “development” and “production”. For security reasons, production instances should run under \"production\" type. Field : environment.config_version Type: string Default: 1.0 Description: DO NOT modify this value if not prompted to do so. Field : environment.domain Type: string Default: (empty) Description: Domain used by your instance. This is used to enforce the security of the API. The API must be served over HTTPS. Only include the domain name, without the protocol or path. The domain MUST be the same as the one used in the frontend. Field : database.database_uri Type: string Default: (empty) Description: The URI of the database to connect to. The URI must be in the format of \"mysql://user:password@host:port/db_name\" "},"title":"2 - API Setup"},"/v1.9/self-host/setup/database/":{"data":{"":"This is the final mandatory step to set up your Zero-TOTP instance. Zero-TOTP uses a MariaDB database, included in the docker-compose file. To mantain the security and integrity of your data, all the administration is delegated to the server owner. Make sure to make regular backups of your database and to secure it properly.\nBefore being able to start Zero-TOTP, you will need to set up your database.","initial-database-migration#Initial database migration":"For now, your database is empty and not initialized. You will need to run the initial database migration to create the necessary tables and data. A built-in administration script is provided to help you with this task.\nYou will be able to manage crucial database operations from the API. To set up you database please :\nStart your database docker compose up -d database\nMake sure the database is running and ready docker compose logs database -f --tail 100\nStart your API docker compose up -d api\nMake sure the API is asking for a migration docker compose logs api -f --tail 100\nYou should see the following message\napi | ERROR [alembic.util.messaging] Target database is not up to date. api | FAILED: Target database is not up to date. api | ❌ Your database is not up to date. Follow Zero-TOTP's documentation to update it. api | 📚 https://docs.zero-totp.com/latest/self-host/admin/database-migration/ api | 🕛 Docker will wait for your action to continue This is expected, as the database is not yet initialized.\nHowever, the API should not be crashing or throwing errors not related to database migration. If it does, please check the logs for any issues, it may be related to your configuration file or the database connection.\nRun the initial database migration docker compose exec api /bin/sh -c \"./admin-toolbox.sh db-migrate\"\nRestart the API docker compose restart api\nThe API should now be healthy and ready to use. You can check the logs to make sure everything is working properly.\nAll done ?\nYou are now all set up ! 🎉🎉\nYou can just start your server docker compose up -d and enjoy. Make sure to visit the customization page to see all the features you can configure."},"title":"3 - Database Setup"},"/v1.9/self-host/setup/reverse-proxy/":{"data":{"":"","#":"A reverse proxy is mandatory to serve Zero-TOTP. The API is not designed to be served directly over the internet. You can use any reverse proxy you want, the following examples uses Nginx and Caddy, but any reverse proxy will work as long as it can serve the frontend and API over HTTPS and handle X-Forwarded-* headers (see below).\nRevproxy requirements No matter which reverse proxy you choose, the following considerations must be taken into account:\nRouting and domain considerations :\nThe frontend and the API must be served on the same domain. Route / must serve the frontend. Route /api/ must serve the API. The requests to the API must contain the /api prefix. Security considerations :\nThe frontend and API over HTTPS. This is mandatory to enable the security features of Zero-TOTP. For security reasons the reverse proxy must overwrite the X-Forwarded-For header with the real remote ip. Warning\nBe careful to X-Forwarded-For that can be spoofed and must not be trusted. Zero-TOTP API is not meant to deal with a list of forwarded IP. The reverse proxy must keep the right one. Please refer to the documentation of your reverse proxy to see how to configure it properly.\nA special guide for revproxy behind Cloudflare is available below.\nImportant\nA bad configuration of the reverse proxy can lead to serious security issues. If you are not sure how to configure your reverse proxy, please use the provided examples, refer to the documentation of your reverse proxy or ask for help in the Zero-TOTP Discord server.\nCaddy example We are considering the API/frontend are running on the same server and the docker compose is configured to expose the API on port 8080 and the frontend on port 4200. Adapt the IP and port to your setup.\nHere is an example of a caddyfile that can be used to serve Zero-TOTP :\nCaddyfilehttps://zero-totp.example.com { # Serve the API reverse_proxy /api/* 127.0.0.1:8080 { header_up X-Forwarded-For {client_ip} } reverse_proxy 127.0.0.1:4200 } This is a basic configuration, make sure to adapt it to your needs. You can find more information on the Caddy documentation.\nNginx example Here is an example of an Nginx configuration that can be used to serve Zero-TOTP. This configuration assumes the API is running on port 8080 and the frontend on port 4200. Adapt the IP and port to your setup.\nnginx.confserver { listen 80; server_name zero-totp.example.com; # Redirect HTTP to HTTPS return 301 https://$host$request_uri; } server { listen 443 ssl; server_name zero-totp.example.com; # SSL configuration ssl_certificate /path/to/your/certificate.crt; ssl_certificate_key /path/to/your/private.key; # Serve the API location /api/ { proxy_pass http://127.0.1:8080/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; } # Serve the frontend location / { proxy_pass http://127.0.1:4200; } } This is a basic configuration, make sure to adapt it to your needs. You can find more information on the Nginx documentation. Note that nginx does not handle TLS termination by itself, you will need to use a tool like Certbot to obtain and renew your SSL certificates.\nReverse proxy behind Cloudflare Cloudflare adds the X-Forwarded-For header if it does not exist, and if it does exist it will just append another IP to it. This means a client can forge their remote IP address with the most widely accepted remote IP header out of the box.\nTo prevent this, 2 solution are available:\nDo NOT use the X-Forwarded-For header, but use the CF-Connecting-IP header instead. This is the recommended solution. (See the Cloudflare documentation for more information). Follow this guide from Authelia’s team to configure cloudflare to safely handle the X-Forwarded-For header. "},"title":"1 -  Revproxy setup"}}